// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cmd/clientstream/pingpong/pingpong-clientstream.proto

package pingpong

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingPongClient is the client API for PingPong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPongClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (PingPong_ClientStreamClient, error)
}

type pingPongClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongClient(cc grpc.ClientConnInterface) PingPongClient {
	return &pingPongClient{cc}
}

func (c *pingPongClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (PingPong_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[0], "/pingpong.PingPong/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongClientStreamClient{stream}
	return x, nil
}

type PingPong_ClientStreamClient interface {
	Send(*Ping) error
	CloseAndRecv() (*Pong, error)
	grpc.ClientStream
}

type pingPongClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingPongClientStreamClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingPongClientStreamClient) CloseAndRecv() (*Pong, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPongServer is the server API for PingPong service.
// All implementations must embed UnimplementedPingPongServer
// for forward compatibility
type PingPongServer interface {
	ClientStream(PingPong_ClientStreamServer) error
	mustEmbedUnimplementedPingPongServer()
}

// UnimplementedPingPongServer must be embedded to have forward compatible implementations.
type UnimplementedPingPongServer struct {
}

func (UnimplementedPingPongServer) ClientStream(PingPong_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedPingPongServer) mustEmbedUnimplementedPingPongServer() {}

// UnsafePingPongServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPongServer will
// result in compilation errors.
type UnsafePingPongServer interface {
	mustEmbedUnimplementedPingPongServer()
}

func RegisterPingPongServer(s grpc.ServiceRegistrar, srv PingPongServer) {
	s.RegisterService(&PingPong_ServiceDesc, srv)
}

func _PingPong_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).ClientStream(&pingPongClientStreamServer{stream})
}

type PingPong_ClientStreamServer interface {
	SendAndClose(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type pingPongClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingPongClientStreamServer) SendAndClose(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingPongClientStreamServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPong_ServiceDesc is the grpc.ServiceDesc for PingPong service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPong_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.PingPong",
	HandlerType: (*PingPongServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _PingPong_ClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/clientstream/pingpong/pingpong-clientstream.proto",
}
